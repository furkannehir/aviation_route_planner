version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: aviation-db
    environment:
      POSTGRES_DB: aviation_route_planner
      POSTGRES_USER: aviation_user
      POSTGRES_PASSWORD: aviation123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aviation_user -d aviation_route_planner"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./aviation-route-planner-app
      dockerfile: Dockerfile
    container_name: aviation-backend
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/aviation_route_planner
      - SPRING_DATASOURCE_USERNAME=aviation_user
      - SPRING_DATASOURCE_PASSWORD=aviation123
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_HIBERNATE_DDL_AUTO=validate
      - SPRING_FLYWAY_ENABLED=true
      - SPRING_FLYWAY_BASELINE_ON_MIGRATE=true
      - SPRINGDOC_API_DOCS_PATH=/api-docs
      - SPRINGDOC_SWAGGER_UI_PATH=/swagger-ui.html
      - CORS_ALLOWED_ORIGINS=http://localhost:5173
      - CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE
      - CORS_ALLOWED_HEADERS=*
      - CORS_ALLOW_CREDENTIALS=true
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    build:
      context: ./aviation-route-planner-ui
      dockerfile: Dockerfile
    container_name: aviation-frontend
    ports:
      - "5173:3000"
    environment:
      - VITE_API_URL=http://localhost:8080/api/v1
    depends_on:
      - backend

volumes:
  postgres_data: